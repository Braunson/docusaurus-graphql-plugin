(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[616],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3181:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return c},default:function(){return p}});var r=n(9603),i=n(120),a=(n(7378),n(5318)),l={id:"scalars",title:"Scalars",slug:"scalars",sidebar_position:8},o={unversionedId:"github-example/scalars",id:"github-example/scalars",isDocsHomePage:!1,title:"Scalars",description:"Boolean",source:"@site/docs/github-example/scalars.md",sourceDirName:"github-example",slug:"/github-example/scalars",permalink:"/docusaurus-graphql-plugin/github-example/scalars",editUrl:"https://github.com/zhouzi/docusaurus-graphql-plugin/edit/main/packages/docs/docs/github-example/scalars.md",version:"current",sidebarPosition:8,frontMatter:{id:"scalars",title:"Scalars",slug:"scalars",sidebar_position:8},sidebar:"docs",previous:{title:"Input objects",permalink:"/docusaurus-graphql-plugin/github-example/inputObjects"}},c=[{value:"Boolean",id:"boolean",children:[]},{value:"Date",id:"date",children:[]},{value:"DateTime",id:"datetime",children:[]},{value:"Float",id:"float",children:[]},{value:"GitObjectID",id:"gitobjectid",children:[]},{value:"GitRefname",id:"gitrefname",children:[]},{value:"GitSSHRemote",id:"gitsshremote",children:[]},{value:"GitTimestamp",id:"gittimestamp",children:[]},{value:"HTML",id:"html",children:[]},{value:"ID",id:"id",children:[]},{value:"Int",id:"int",children:[]},{value:"PreciseDateTime",id:"precisedatetime",children:[]},{value:"String",id:"string",children:[]},{value:"URI",id:"uri",children:[]},{value:"X509Certificate",id:"x509certificate",children:[]}],s={toc:c};function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"boolean"},"Boolean"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Boolean")," scalar type represents ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h2",{id:"date"},"Date"),(0,a.kt)("p",null,"An ISO-8601 encoded date string."),(0,a.kt)("h2",{id:"datetime"},"DateTime"),(0,a.kt)("p",null,"An ISO-8601 encoded UTC date string."),(0,a.kt)("h2",{id:"float"},"Float"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Float")," scalar type represents signed double-precision fractional values as specified by ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/IEEE_floating_point"},"IEEE 754"),"."),(0,a.kt)("h2",{id:"gitobjectid"},"GitObjectID"),(0,a.kt)("p",null,"A Git object ID."),(0,a.kt)("h2",{id:"gitrefname"},"GitRefname"),(0,a.kt)("p",null,"A fully qualified reference name (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"refs/heads/master"),")."),(0,a.kt)("h2",{id:"gitsshremote"},"GitSSHRemote"),(0,a.kt)("p",null,"Git SSH string"),(0,a.kt)("h2",{id:"gittimestamp"},"GitTimestamp"),(0,a.kt)("p",null,"An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC."),(0,a.kt)("h2",{id:"html"},"HTML"),(0,a.kt)("p",null,"A string containing HTML code."),(0,a.kt)("h2",{id:"id"},"ID"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ID")," scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as ",(0,a.kt)("inlineCode",{parentName:"p"},'"4"'),") or integer (such as ",(0,a.kt)("inlineCode",{parentName:"p"},"4"),") input value will be accepted as an ID."),(0,a.kt)("h2",{id:"int"},"Int"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Int")," scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."),(0,a.kt)("h2",{id:"precisedatetime"},"PreciseDateTime"),(0,a.kt)("p",null,"An ISO-8601 encoded UTC date string with millisecond precision."),(0,a.kt)("h2",{id:"string"},"String"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."),(0,a.kt)("h2",{id:"uri"},"URI"),(0,a.kt)("p",null,"An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."),(0,a.kt)("h2",{id:"x509certificate"},"X509Certificate"),(0,a.kt)("p",null,"A valid x509 certificate string"))}p.isMDXComponent=!0}}]);